name: Buerokratt Common CI Pipeline

on:
  pull_request:
    branches: [ main ]
    tags:
      - "[0-9].[0-9].[0-9]"

jobs:
  versioning:
    runs-on: ubuntu-latest
    outputs:
      versionNumber: ${{ steps.gitversion.outputs.semVer }}   
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: Check if tag exists
        run: |
          tags=$(git tag -l)
          if [ ${#tags} -lt 1 ]
          then
            git tag -a 0.1.0 -m 'first tag'
          fi
      
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.x'
      
      - name: Determine Version
        id: gitVersion
        uses: gittools/actions/gitversion/execute@v0.9.7
           
      - name: Validate version number
        run: |
          #Check if new version is greater/equal to current version
          currentVersion=$(git describe --tags --abbrev=0)
          currentVersion=$(( "${currentVersion//./''}" ))
          
          newVersion=${{ steps.gitversion.outputs.semVer }}
          newVersion=$(( "${newVersion//./''}" ))

          if [ $currentVersion -gt $newVersion ] 
          then
            echo "invalid"
          fi

  BuildTest:
    runs-on: ubuntu-latest

    env:
      BUILD_VER: 1.0.${{ github.run_number }}-prerelease
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
        
    - name: Dotnet Restore Tools
      run: dotnet tool restore --tool-manifest "src/.config/dotnet-tools.json"
        
    - name: Dotnet Restore
      run: dotnet restore src/*.sln
        
    - name: Dotnet Format
      run: dotnet format src/*.sln --no-restore --verify-no-changes
      
    - name: Dotnet Build
      run: dotnet build src/*.sln --no-restore
      
    - name: Dotnet Publish
      working-directory: src
      run: dotnet publish *.sln --no-restore
     
    - name: Dotnet Test (unit tests only)
      run: dotnet test src/*.UnitTests/*.csproj --no-build --verbosity normal --collect:"XPlat Code Coverage"
      
    - name: Copy Coverage output to root
      run: cp src/*.UnitTests/TestResults/**/coverage.cobertura.xml coverage.cobertura.xml
      
    - name: Code Coverage Summary
      uses: irongut/CodeCoverageSummary@5088d5eb315a46ff785c607078606c0b9107e0b6
      with:
        filename: coverage.cobertura.xml
        fail_below_min: true
        format: markdown
        output: both
        thresholds: '80'
    
    - name: Upload Coverage Markdown Report
      uses: actions/upload-artifact@v3.0.0
      with:
        name: coverage-report-markdown
        path: code-coverage-results.md
        
    - name: Upload Coverage XML Report
      uses: actions/upload-artifact@v3.0.0
      with:
        name: coverage-report-xml
        path: coverage.cobertura.xml
        
    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@39c5b5dc7717447d0cba270cd115037d32d28443
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: code-coverage-results.md
  
    - name: Mutation Test
      working-directory: src
      run: dotnet stryker
    
    - name: Upload Mutation Report
      uses: actions/upload-artifact@v3.0.0
      with:
        name: mutation-report
        path: src/StrykerOutput

    - name: Pack
      run: dotnet pack src/*.sln --configuration Release /p:Version=${{ env.BUILD_VER }} --output nupkgs
        
    - name: Publish To Nuget
      run: dotnet nuget push nupkgs/*.nupkg -s 'https://api.nuget.org/v3/index.json' -k ${{secrets.NUGET_GALLERY_API_KEY}}